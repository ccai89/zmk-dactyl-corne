#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

#define DEFAULT 0
#define NAV     1
#define SYM     2
#define FUNC    3
#define MEDIA   4
#define MOUSE   5
#define WINNAV  6

&caps_word { continue-list = <UNDERSCORE MINUS>; };

/ {
    combos {
        compatible = "zmk,combos";

        combo_undo {
            timeout-ms = <50>;
            key-positions = <20 21>;
            bindings = <&kp LC(Z)>;
        };

        combo_copy {
            timeout-ms = <50>;
            key-positions = <21 22>;
            bindings = <&kp LG(Q)>;
        };

        combo_paste {
            timeout-ms = <50>;
            key-positions = <23 24>;
            bindings = <&kp LG(V)>;
        };

        combo_cut {
            bindings = <&kp LG(X)>;
            key-positions = <22 23>;
        };

        combo_switch_app {
            bindings = <&kp LG(TAB)>;
            key-positions = <3 4>;
        };

        combo_switch_window {
            bindings = <&kp LG(GRAVE)>;
            key-positions = <5 6>;
        };

        combo_pipe {
            bindings = <&kp PIPE>;
            key-positions = <26 25>;
        };

        combo_back_slash {
            bindings = <&kp LS(NON_US_BACKSLASH)>;
            key-positions = <27 28>;
        };

        combo_grave {
            bindings = <&kp GRAVE>;
            key-positions = <26 27>;
        };

        combo_underscore {
            bindings = <&kp UNDERSCORE>;
            key-positions = <28 29>;
        };

        combo_curly_right {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <8 9>;
        };

        combo_curly_left {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <0 1>;
        };

        combo_square_left {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <3 2>;
        };

        combo_square_right {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <6 7>;
        };

        combo_paren_left {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <1 2>;
        };

        combo_paren_right {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <7 8>;
        };

        combo_search {
            bindings = <&kp LG(SPACE)>;
            key-positions = <13 14 15 16>;
        };
    };
};

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };

        hs: homerow_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_SHIFT";
            #binding-cells = <2>;
            tapping-term-ms = <175>;
            quick_tap_ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };

        pht: positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "POSITIONAL_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <400>;
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <1>;    // <---[[the W key]]
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "Default";
            bindings = <
&kp Q          &kp W         &kp F         &kp P           &kp B        &kp J         &kp L           &lt 4 U       &kp Y               &kp SEMI
&hm LCTRL A    &hm LGUI R    &hm LALT S    &hs LSHIFT T    &kp G        &lt 5 M       &hs RSHIFT N    &hm RALT E    &hm RGUI I          &hm RCTRL O
&kp Z          &kp X         &kp C         &kp D           &kp V        &kp K         &kp H           &kp COMMA     &kp DOT             &kp FSLH
               &kp K_MUTE    &kp DEL       &lt 1 RET       &lt 3 TAB    &lt 4 BSPC    &lt 2 SPACE     &kp SQT       &kp C_PLAY_PAUSE
            >;
        };

        num_layer {
            label = "Numbers";
            bindings = <
&kp ESC        &kp PG_UP        &kp UP      &kp PG_DN                 &trans               &kp ASTRK    &kp N7       &kp N8     &kp N9    &kp MINUS
&kp HOME       &kp LEFT         &kp DOWN    &kp RIGHT                 &kp END              &kp FSLH     &kp N4       &kp N5     &kp N6    &kp PLUS
&kp LG(TAB)    &kp LG(GRAVE)    &trans      &kp LG(LS(LEFT_ARROW))    &kp LG(LS(RIGHT))    &kp EQUAL    &kp N1       &kp N2     &kp N3    &kp N0
               &trans           &trans      &trans                    &kp TAB              &kp BSPC     &kp SPACE    &kp DOT    &trans
            >;
        };

        sym_layer {
            label = "Symbols";
            bindings = <
&kp EXCL     &kp AT       &kp HASH           &kp DLLR    &kp PRCNT     &kp CARET               &kp AMPS          &kp ASTRK      &kp UNDER    &kp EQUAL
&kp MINUS    &kp LBKT     &kp LBRC           &kp LPAR    &kp LT        &kp GT                  &kp RPAR          &kp RBRC       &kp RBKT     &kp PLUS
&kp GRAVE    &kp TILDE    &kp LC(LS(TAB))    &trans      &caps_word    &kp LG(LS(NUMBER_4))    &kp LG(LS(N5))    &kp LC(TAB)    &trans       &kp BSLH
             &trans       &trans             &kp RET     &kp DEL       &kp BSPC                &trans            &trans         &trans
            >;
        };

        func_layer {
            label = "Function";
            bindings = <
&bootloader     &kp LS(PG_UP)    &kp LS(UP)      &kp LS(PG_DN)    &trans         &kp C_MUTE          &kp F7    &kp F8       &kp F9    &kp F10
&kp LS(HOME)    &kp LS(LEFT)     &kp LS(DOWN)    &kp LS(RIGHT)    &kp LS(END)    &kp K_VOL_UP        &kp F4    &kp F5       &kp F6    &kp F11
&bt BT_SEL 3    &bt BT_SEL 2     &bt BT_SEL 1    &bt BT_SEL 0     &bt BT_CLR     &kp K_VOL_DN        &kp F1    &kp F2       &kp F3    &kp F12
                &trans           &out OUT_USB    &out OUT_BLE     &trans         &kp C_PLAY_PAUSE    &trans    &kp SPACE    &trans
            >;
        };

        bt_layer {
            label = "Bluetooth";
            bindings = <
&trans    &trans    &trans    &trans    &trans    &trans        &bt BT_PRV      &bt BT_NXT      &trans          &trans
&trans    &trans    &trans    &trans    &trans    &trans        &trans          &trans          &trans          &trans
&trans    &trans    &trans    &trans    &trans    &bt BT_CLR    &bt BT_SEL 0    &bt BT_SEL 1    &bt BT_SEL 2    &bt BT_SEL 3
          &trans    &trans    &trans    &trans    &trans        &out OUT_BLE    &out OUT_USB    &trans
            >;
        };

        mouse_layer {
            label = "Mouse";
            bindings = <
&bootloader    &mkp RCLK         &mmv MOVE_UP      &mkp LCLK          &mkp MB5          &trans             &trans            &trans    &trans    &trans
&trans         &mmv MOVE_LEFT    &mmv MOVE_DOWN    &mmv MOVE_RIGHT    &mkp MB4          &trans             &trans            &trans    &trans    &trans
&trans         &trans            &trans            &mkp MCLK          &trans            &trans             &trans            &trans    &trans    &trans
               &trans            &trans            &msc SCRL_UP       &msc SCRL_LEFT    &msc SCRL_RIGHT    &msc SCRL_DOWN    &trans    &trans
            >;
        };
    };
};
